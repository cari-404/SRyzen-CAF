name: Build SuperRyzen Kernel

on:
  push:
    branches: caf

env:
  KSU_VERSION: "0.6.8"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Build SuperRyzen Kernel
        run: |
          wget https://raw.githubusercontent.com/cari-404/SRyzen-CAF/caf/build-start.sh
          bash build-start.sh stable clang
          cd kernel
          mkdir kernel-done
          wget https://raw.githubusercontent.com/cari-404/SRyzen-CAF/caf/build-dtb.sh
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v${{ env.KSU_VERSION }}
          bash build-dtb.sh tulip clang qpnp
          git apply qti.patch
          bash build-dtb.sh tulip clang qti
          git restore .
          wget https://raw.githubusercontent.com/cari-404/SRyzen-CAF/caf/build.sh
          bash build.sh tulip newcam clang
          bash build.sh tulip oldcam clang
          git apply oc.patch
          bash build-dtb.sh tulip clang qpnp
          git apply qti.patch
          bash build-dtb.sh tulip clang qti
          git restore .
          bash build.sh tulip newcam oc clang
          bash build.sh tulip oldcam oc clang
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tulip
          path: kernel/ak3-tulip/*
                
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          path: kernel/kernel-done/*
          
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: oldqti
          path: kernel/kernel-done/SuperRyzen-OSS_tulip_v10_oldcam.zip
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v10 with Kernel SU v${{ env.KSU_VERSION }}
          release_name: Release version With KSU v${{ env.KSU_VERSION }}

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kernel/kernel-done/SuperRyzen-OSS_tulip_v10_oldcam.zip
          asset_name: SuperRyzen-OSS_tulip_v10_oldcam_ksu_v${{ env.KSU_VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kernel/kernel-done/SuperRyzen-OSS_tulip_v10_newcam.zip
          asset_name: SuperRyzen-OSS_tulip_v10_newcam_ksu_v${{ env.KSU_VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kernel/kernel-done/SuperRyzen-OSS_tulip_v10-OC_newcam.zip
          asset_name: SuperRyzen-OSS_tulip_v10-OC_newcam_ksu_v${{ env.KSU_VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kernel/kernel-done/SuperRyzen-OSS_tulip_v10-OC_oldcam.zip
          asset_name: SuperRyzen-OSS_tulip_v10-OC_oldcam_ksu_v${{ env.KSU_VERSION }}.zip
          asset_content_type: application/zip


          
